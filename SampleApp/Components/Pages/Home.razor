@page "/"
@inject ILogger<Home> Logger
@inject LoggingRequestIdProvider RequestId
@inject SampleService SampleService
@inject SerilogQuery Query
@using SampleApp.Data
@using SerilogBlazor.Abstractions

<PageTitle>Serilog Viewer</PageTitle>
<button @onclick="LogThis">Log Me</button>

<hr />

<LevelToggle OnLogLevelsChanged="OnLogLevelsChanged" />
<hr />

<SourceContextFilter @ref="sourceContextFilter" SourceContextClicked="OnSourceContextClicked" />
<SearchBar TDbContext="ApplicationDbContext" @ref="searchBar" @rendermode="InteractiveServer" SearchExecuted="OnSearchExecuted" />
<SerilogGrid Entries="@entries" RequestIdClicked="OnRequestIdClicked" @rendermode="InteractiveServer" />

@code {
	private IEnumerable<SerilogEntry> entries = [];
	private SearchBar<ApplicationDbContext>? searchBar;
	private SourceContextFilter? sourceContextFilter;
	private bool showDialog;

	private void LogThis()
	{
		// attach an id to all logging in this method
		Logger.BeginRequestId(RequestId);

		Logger.LogInformation("This is an info log message");

		Logger.LogDebug("This is a debug message");

		// logs from this method call will be correlated with requestId in scope here
		SampleService.DoWork();
	}

	override protected async Task OnInitializedAsync()
	{
		entries = await Query.ExecuteAsync();
	}	

	private void OnSearchExecuted(IEnumerable<SerilogEntry> results)
	{
		entries = results;	
	}

	private async Task OnRequestIdClicked(string requestId)
	{
		if (searchBar is not null)
		{
			await searchBar.AddRequestId(requestId);
		}
	}

	private async Task OnSourceContextClicked(string sourceContext)
	{
		if (searchBar is not null)
		{
			await searchBar.AddSourceContext(sourceContext);
		}
	}

	private async Task OnLogLevelsChanged()
	{
		if (sourceContextFilter is not null)
		{
			await sourceContextFilter.RefreshAsync();
		}
	}
}