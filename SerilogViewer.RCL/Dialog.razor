<dialog @ref="dialogElement" style="width: @Width; height: @Height;">
	<div class="dialog-header">
		<div>@Title</div>
		<button type="button" class="close-button" @onclick="CloseDialog">Ã—</button>
	</div>
	<div class="dialog-content">
		@ChildContent
	</div>	
	<div class="dialog-footer">
		<button type="button" class="dialog-button primary" @onclick="OnOKClicked">OK</button>
		<button type="button" class="dialog-button" @onclick="CloseDialog">Cancel</button>
	</div>
</dialog>

@code {
	private ElementReference dialogElement;

	[Parameter]
	public bool Visible { get; set; } = false;

	[Parameter]
	public EventCallback<bool> VisibleChanged { get; set; }

	[Parameter]
	public string Title { get; set; } = "Dialog Title";

	[Parameter] 
	public string? Width { get; set; } = "500px";

	[Parameter] 
	public string? Height { get; set; } = "400px";

	[Parameter]
	public RenderFragment ChildContent { get; set; } = @<span>No content defined</span>;

	[Parameter]
	public EventCallback ClickedOK { get; set; }

	[Inject]
	private IJSRuntime JSRuntime { get; set; } = default!;

	protected override async Task OnParametersSetAsync()
	{
		if (Visible)
		{
			await ShowDialog();
		}
		else
		{
			await HideDialog();
		}
	}

	private async Task ShowDialog()
	{
		await JSRuntime.InvokeVoidAsync("showDialog", dialogElement);
	}

	private async Task HideDialog()
	{
		await JSRuntime.InvokeVoidAsync("hideDialog", dialogElement);
	}

	private async Task CloseDialog()
	{
		await VisibleChanged.InvokeAsync(false);
	}

	private async Task OnOKClicked()
	{
		await ClickedOK.InvokeAsync();
		await CloseDialog();
	}
}