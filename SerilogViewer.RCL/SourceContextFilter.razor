@using Microsoft.EntityFrameworkCore
@using SerilogViewer.Abstractions.SourceContextView
@inject SerilogSourceContextMetricsQuery Query
@typeparam TDbContext where TDbContext : DbContext, ISourceContextViewState
@inject IDbContextFactory<TDbContext> DbFactory

<div>
	@foreach (var levelGrp in metricsResults.GroupBy(row => row.Level))
	{
		<div class="level-group">
			<details>
				<summary>@levelGrp.Key (@levelGrp.Count())</summary>
				<div class="level-group-body">
					@foreach (var metricGrp in levelGrp.GroupBy(row => GetNamespaceRoot(row.SourceContext)))
					{
						<details>
							<summary>@metricGrp.Key (@metricGrp.Count())</summary>
							<div class="source-context-grid">
								@foreach (var item in metricGrp)
								{
									<div>@item.SourceContext</div>
									<div>@item.Count</div>
									<div>@item.LatestTimestamp - @item.AgeText</div>
									<div>@item.IsVisible</div>
								}
							</div>
						</details>						
					}
				</div>
			</details>
		</div>
		<hr />
	}
</div>

@code {
	private IEnumerable<SourceContextMetricsResult> metricsResults = [];	

	[Parameter] public string? UserName { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Refresh();
	}

	protected override async Task OnParametersSetAsync()
	{
		await Refresh();
	}

	private async Task Refresh()
	{
		metricsResults = await Query.ExecuteAsync();
		
		using var db = DbFactory.CreateDbContext();
		var userSettings = await db.SourceContexts.Where(row => row.UserName == UserName).ToListAsync();

		foreach (var item in metricsResults.Join(userSettings, m => (m.Level, m.SourceContext), us => (us.Level, us.SourceContext), (metric, setting) => new { Metric = metric, Setting = setting }))
		{
			item.Metric.IsVisible = item.Setting.IsVisible;
		}
	}

	private string GetNamespaceRoot(string @namespace)
	{
		var parts = @namespace.Split('.');
		return (parts.Length == 0) ? @namespace : parts[0];
	}
}