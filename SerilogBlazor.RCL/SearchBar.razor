@using Microsoft.EntityFrameworkCore
@using SerilogBlazor.Abstractions
@using SerilogBlazor.Abstractions.SavedSearches
@typeparam TDbContext where TDbContext : DbContext, ISerilogSavedSearches
@inject SerilogQuery Query
@inject IDbContextFactory<TDbContext> DbFactory

<div class="search-container">	
	<input type="text" @bind-value="searchText" @bind-value:after="OnSearchTextChanged" placeholder="Search..." class="form-control search-input" />

	<div class="paging-controls">
		<button type="button" class="paging-button" @onclick="ShowSaveDialog" disabled="@(string.IsNullOrWhiteSpace(searchText))" title="Save current search">ðŸ’¾</button>
		<button type="button" class="paging-button" @onclick="PreviousPage" disabled="@(page == 0)">â€¹</button>
		<button type="button" class="paging-button" @onclick="NextPage" disabled="@(!hasMoreResults)">â€º</button>
	</div>
</div>

<details>
	<summary>Saved Searches</summary>
	@if (savedSearches.Any())
	{
		<ul class="saved-searches-list">
			@foreach (var search in savedSearches)
			{
				<li class="saved-search-item">
					<button type="button" class="saved-search-button" @onclick="() => ExecuteSavedSearch(search)" title="Execute this search">
						@search.SearchName
					</button>
					<button type="button" class="delete-search-button" @onclick="() => DeleteSavedSearch(search)" title="Delete this search">Ã—</button>
				</li>
			}
		</ul>
	}
	else
	{
		<p>No saved searches yet. Save your current search using the ðŸ’¾ button above.</p>
	}
</details>

@if (searchTerms.Any())
{
	<details>
		<summary>Parsed Search Terms</summary>
		<ul>
			@foreach (var term in searchTerms)
			{
				<li>@term</li>
			}
		</ul>
	</details>
}

<details>
	<summary>Tips</summary>
	<ul>
		<li>Enclose text in square brackets to search in the <strong>Source Context</strong> field</li>
		<li>Add an age expression by starting with a minus sign <code>-</code> followed by a duration such as <code>15m</code> or <code>2hr</code></li>
		<li>Use the <code>@@</code> sign to specify a level (i.e. Error, Warning, Information). Partial text like <code>err</code> and <code>info</code> works</li>
		<li>Use <code>!</code> to search the Exception field</li>
		<li>Use <code>#</code> to search the RequestId field</li>
		<li>Any other text will search the <strong>Message</strong> field</li>
	</ul>

	<p>Examples:</p>
	<ul>
		<li><code>hold on there -30m [MyApp]</code> means <code>Message contains "hold on there"</code> and <code>SourceContext contains 'MyApp'</code> and <code>Age less than 30 minutes ago</code></li>
		<li><code>#564</code> means <code>RequestId contains '564'</code></li>		
		<li><code>[aspnetcore] @@err</code> means any errors in the AspNetCore namespace</li>
	</ul>
</details>

<Dialog @bind-Visible="showSaveDialog" Title="Save Search" Width="400px" Height="200px" ClickedOK="SaveSearch">
	<div class="save-search-form">
		<label for="searchName">Search Name:</label>
		<input type="text" id="searchName" @bind="newSearchName" @bind:event="oninput" placeholder="Enter a name for this search..." class="form-control" />
		@if (!string.IsNullOrWhiteSpace(saveErrorMessage))
		{
			<div class="error-message">@saveErrorMessage</div>
		}
	</div>
</Dialog>

@code {
	private string searchText = string.Empty;
	private string[] searchTerms = [];
	private SerilogQuery.Criteria? criteria;
	private int page = 0;
	private bool hasMoreResults = true;
	private SerilogSavedSearch[] savedSearches = [];
	private bool showSaveDialog = false;
	private string newSearchName = string.Empty;
	private string saveErrorMessage = string.Empty;

	const int pageSize = 50;

	[Parameter]
	public string UserName { get; set; } = string.Empty; // Set this from the authenticated user context

	[Parameter]
	public EventCallback<string> SearchTextChanged { get; set; }

	[Parameter]
	public EventCallback<IEnumerable<SerilogEntry>> SearchExecuted { get; set; }

	private async Task OnSearchTextChanged()
	{
		page = 0; // Reset to first page when search text changes
		hasMoreResults = true; // Reset this flag when search changes
		await ExecuteSearch();
	}

	protected override async Task OnInitializedAsync()
	{
		using var db = DbFactory.CreateDbContext();
		savedSearches = await db.SerilogSavedSearches
			.Where(row => row.UserName == this.UserName)
			.OrderBy(s => s.SearchName)
			.ToArrayAsync();
	}

	private async Task PreviousPage()
	{
		if (page > 0)
		{
			page--;
			await ExecuteSearch();
		}
	}

	private async Task NextPage()
	{
		if (hasMoreResults)
		{
			page++;
			await ExecuteSearch();
		}
	}

	private async Task ExecuteSearch()
	{
		(criteria, searchTerms) = Query.ParseCriteria(searchText);
		var results = await Query.ExecuteAsync(criteria, page * pageSize, pageSize);
		
		// Check if we have more results by requesting one extra item
		var checkResults = await Query.ExecuteAsync(criteria, (page + 1) * pageSize, 1);
		hasMoreResults = checkResults.Any();
		
		await SearchTextChanged.InvokeAsync(searchText);
		await SearchExecuted.InvokeAsync(results);
	}

	public async Task AddRequestId(string requestId)
	{
		if (string.IsNullOrWhiteSpace(requestId))
			return;

		// Remove any existing RequestId from the search text
		var regex = new System.Text.RegularExpressions.Regex(@"#\w+");
		var cleanedSearchText = regex.Replace(searchText, "").Trim();
		
		// Add the new RequestId
		searchText = string.IsNullOrWhiteSpace(cleanedSearchText) 
			? $"#{requestId}" 
			: $"{cleanedSearchText} #{requestId}";
		
		page = 0; // Reset to first page when search changes
		hasMoreResults = true; // Reset this flag when search changes
		await ExecuteSearch();
	}

	private void ShowSaveDialog()
	{
		newSearchName = string.Empty;
		saveErrorMessage = string.Empty;
		showSaveDialog = true;
	}

	private async Task SaveSearch()
	{
		if (string.IsNullOrWhiteSpace(newSearchName))
		{
			saveErrorMessage = "Please enter a search name.";
			return;
		}

		if (string.IsNullOrWhiteSpace(searchText))
		{
			saveErrorMessage = "No search expression to save.";
			return;
		}

		try
		{
			using var db = DbFactory.CreateDbContext();
			
			// Check if search name already exists for this user
			var existingSearch = await db.SerilogSavedSearches
				.FirstOrDefaultAsync(s => s.UserName == UserName && s.SearchName == newSearchName);
			
			if (existingSearch != null)
			{
				// Update existing search
				existingSearch.Expression = searchText;
				existingSearch.UpdatedAt = DateTime.UtcNow;
			}
			else
			{
				// Create new search
				var newSearch = new SerilogSavedSearch
				{
					UserName = UserName,
					SearchName = newSearchName,
					Expression = searchText,
					CreatedAt = DateTime.UtcNow
				};
				db.SerilogSavedSearches.Add(newSearch);
			}

			await db.SaveChangesAsync();
			
			// Refresh saved searches list
			savedSearches = await db.SerilogSavedSearches
				.Where(row => row.UserName == UserName)
				.OrderBy(s => s.SearchName)
				.ToArrayAsync();
			
			showSaveDialog = false;
		}
		catch (Exception ex)
		{
			saveErrorMessage = $"Error saving search: {ex.Message}";
		}
	}

	private async Task ExecuteSavedSearch(SerilogSavedSearch savedSearch)
	{
		searchText = savedSearch.Expression;
		page = 0;
		hasMoreResults = true;
		await ExecuteSearch();
	}

	private async Task DeleteSavedSearch(SerilogSavedSearch savedSearch)
	{
		try
		{
			using var db = DbFactory.CreateDbContext();
			db.SerilogSavedSearches.Remove(savedSearch);
			await db.SaveChangesAsync();
			
			// Refresh saved searches list
			savedSearches = savedSearches.Where(s => s.Id != savedSearch.Id).ToArray();
		}
		catch
		{
			// In a real application, you might want to show this error to the user
			// For now, we'll just ignore deletion errors
		}
	}
}