@using Microsoft.EntityFrameworkCore
@inject SerilogSourceContextMetricsQuery Query
@inject LogLevels LogLevels

<div>
	@foreach (var levelGrp in metricsResults.GroupBy(row => row.Level))
	{
		<div class="level-group">
			<details>
				<summary>
					<span class="level-heading-badge level-@levelGrp.Key.ToLower()">@levelGrp.Key</span>					
					<span>
						@foreach (var metricGrp in levelGrp.GroupBy(row => GetNamespaceRoot(row.SourceContext)))
						{
							<span style="margin-right:.5rem">@metricGrp.Key - @metricGrp.Count()</span>
						}
					</span>
				</summary>
				<div class="level-group-body">
					@foreach (var metricGrp in levelGrp.GroupBy(row => GetNamespaceRoot(row.SourceContext)))
					{
						<details>
							<summary>@metricGrp.Key - @metricGrp.Count()</summary>
							<div class="source-context-grid">
								@foreach (var item in metricGrp)
								{
									<div><a @onclick="(async () => await SourceContextClicked.InvokeAsync(item.SourceContext))" @onclick:preventDefault>@item.SourceContext</a></div>
									<div>@item.Count</div>
									<div>@item.LatestTimestamp - @item.AgeText</div>									
									<div>@GetEffectiveLogLevel(item.SourceContext)</div>
								}
							</div>
						</details>						
					}
				</div>
			</details>
		</div>
		<hr />
	}
</div>

@code {
	private IEnumerable<SourceContextMetricsResult> metricsResults = [];	

	[Parameter] public string? UserName { get; set; }

	[Parameter] public EventCallback<string> SourceContextClicked { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Refresh();
	}

	protected override async Task OnParametersSetAsync()
	{
		await Refresh();
	}

	private async Task Refresh()
	{
		metricsResults = await Query.ExecuteAsync();	
	}

	public async Task RefreshAsync()
	{
		await Refresh();
		await InvokeAsync(StateHasChanged);
	}

	private string GetNamespaceRoot(string? @namespace)
	{
		if (string.IsNullOrWhiteSpace(@namespace)) return string.Empty;
		var parts = @namespace.Split('.');
		return (parts.Length == 0) ? @namespace : parts[0];
	}

	private string GetEffectiveLogLevel(string? sourceContext)
	{
		if (string.IsNullOrWhiteSpace(sourceContext)) return LogLevels.DefaultLevel.ToString();

		// Find the longest matching prefix from LogLevels.LoggingLevels
		string? bestMatch = null;
		int bestMatchLength = 0;

		foreach (var kvp in LogLevels.LoggingLevels)
		{
			var prefix = kvp.Key;
			if (sourceContext.StartsWith(prefix) && prefix.Length > bestMatchLength)
			{
				bestMatch = prefix;
				bestMatchLength = prefix.Length;
			}
		}

		if (bestMatch != null)
		{
			return LogLevels.LoggingLevels[bestMatch].MinimumLevel.ToString();
		}

		// Default to Information if no prefix matches
		return LogLevels.DefaultLevel.ToString();
	}
}